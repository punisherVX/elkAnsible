input {
    # Input for PAN-OS device log
    udp {
        host => "0.0.0.0"
        port => "5514"
        type => "udp"
        tags => [ "PAN-OS_syslog" ]
    }
}

filter {
    if "PAN-OS_syslog" in [tags] {
        # Log types are "TRAFFIC", "THREAT", "CONFIG" and "SYSTEM".
        # Threat log fields: https://docs.paloaltonetworks.com/pan-os/8-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/threat-log-fields.html
        if ([message] =~ /THREAT/) {
            csv {
                source => "message"
                columns => [ 
                    "Domain", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "Config Version",
                    "GeneratedTime", "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName", 
                    "SourceUser", "DestinationUser", "Application", "VirtualSystem", "SourceZone", "DestinationZone",
                    "InboundInterface", "OutboundInterface", "LogForwardingProfile", "Time Logged", "SessionID",
                    "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort", "NATDestinationPort", "Flags",
                    "Protocol", "Action", "URL_Filename", "ThreatID", "URLCategory", "Severity", "Direction",
                    "SequenceNumber", "ActionFlags", "SourceLocation", "DestinationLocation", "cpadding", 
                    "ContentType", "PCAP_ID", "FileDigest", "Cloud", "URLIndex", "UserAgent", "FileType",
                    "X-Forwarded-For", "Referer", "Sender", "Subject", "Recipient", "ReportID",
                    "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                    "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "File_URL", "SourceVMUUID",
                    "DestinationVMUUID", "HTTPMethod", "TunnelID_IMSI", "MonitorTag_IMEI", "ParentSessionID", 
                    "ParentStartTime", "TunnelType", "ThreatCategory", "ContentVersion", "SigFlags" 
                ]
            }
            mutate {
                convert => [ "DeviceGroupHierarchyLevel1", "integer" ]
                convert => [ "DeviceGroupHierarchyLevel2", "integer" ]
                convert => [ "DeviceGroupHierarchyLevel3", "integer" ]
                convert => [ "DeviceGroupHierarchyLevel4", "integer" ]
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "ParentSessionID", "integer" ]
                convert => [ "RepeatCount", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
                convert => [ "SessionID", "integer" ]
                convert => [ "SourcePort", "integer" ]
                convert => [ "TunnelID_IMSI", "integer" ]
      
                add_tag => ["PAN-OS_threat"]
            }
                   
        }   # End of if message is THREAT
               
        # Traffic log fields: https://docs.paloaltonetworks.com/pan-os/8-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/traffic-log-fields.html
        else if ([message] =~ /TRAFFIC/) {
            csv {
                source => "message"
                columns => [ 
                    "Domain", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "Config Version",
                    "GeneratedTime", "SourceIP", "DestinationIP", "NATSourceIP", "NATDestinationIP", "RuleName",
                    "SourceUser", "DestinationUser", "Application", "VirtualSystem", "SourceZone", "DestinationZone",
                    "InboundInterface", "OutboundInterface", "LogForwardingProfile", "TimeLogged", "SessionID",
                    "RepeatCount", "SourcePort", "DestinationPort", "NATSourcePort", "NATDestinationPort", "Flags",
                    "Protocol", "Action", "Bytes", "BytesSent", "BytesReceived", "Packets", "StartTime", "ElapsedTime",
                    "URLCategory", "Padding", "SequenceNumber", "ActionFlags", "SourceLocation", 
                    "DestinationLocation", "cpadding", "PacketsSent", "PacketsReceived", "SessionEndReason",
                    "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3",
                    "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName", "ActionSource", "SourceVMUUID",
                    "DestinationVMUUID", "TunnelID_IMSI", "MonitorTag_IMEI", "ParentSessionID", "ParentStartTime",
                    "TunnelType" 
                ]
            }
            mutate {
                convert => [ "Bytes", "integer" ]
                convert => [ "BytesReceived", "integer" ]
                convert => [ "BytesSent", "integer" ]
                convert => [ "DestinationPort", "integer" ] 
                convert => [ "DeviceGroupHierarchyLevel1", "integer" ] 
                convert => [ "DeviceGroupHierarchyLevel2", "integer" ] 
                convert => [ "DeviceGroupHierarchyLevel3", "integer" ] 
                convert => [ "DeviceGroupHierarchyLevel4", "integer" ] 
                convert => [ "ElapsedTime", "integer" ]
                convert => [ "GeoIP.dma_code", "integer" ]
                convert => [ "GeoIP.latitude", "float" ]
                convert => [ "GeoIP.longitude", "float" ]
                convert => [ "NATDestinationPort", "integer" ]
                convert => [ "NATSourcePort", "integer" ]
                convert => [ "Packets", "integer" ]
                convert => [ "PacketsReceived", "integer" ]
                convert => [ "PacketsSent", "integer" ]
                convert => [ "ParentSessionID", "integer" ]
                convert => [ "RepeatCount", "integer" ]
                convert => [ "SequenceNumber", "integer" ]
                convert => [ "SessionID", "integer" ]
                convert => [ "SourcePort", "integer" ]
                convert => [ "TunnelID_IMSI", "integer" ]
                add_tag => [ "PAN-OS_traffic"]
            }
        }

        # Config log fields: https://docs.paloaltonetworks.com/pan-os/8-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/config-log-fields.html
        else if ([message] =~ /CONFIG/) {
            csv {
                source => "message"
                columns => [
                    "Domain", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "Config Version","Generated Time", 
                    "Host","VirtualSystem", "Command", "Admin", "Client", "Result", "ConfigurationPath", 
                    "BeforeChangeDetail","AfterChangeDetail", "SequenceNumber", "ActionFlags", 
                    "DeviceGroupHierarchyLevel1","DeviceGroupHierarchyLevel2", "DeviceGroupHierarchyLevel3", 
                    "DeviceGroupHierarchyLevel4","VirtualSystemName", "DeviceName"
                ]
    	    }
	        mutate {
                add_tag => [ "PAN-OS_config"]
            }
        }

        # System log fields: https://docs.paloaltonetworks.com/pan-os/8-1/pan-os-admin/monitoring/use-syslog-for-monitoring/syslog-field-descriptions/system-log-fields.html
        else if ([message] =~ /SYSTEM/) {
            csv {
                source => "message"
                columns => [
                    "Domain", "ReceiveTime", "SerialNumber", "Type", "Threat_ContentType", "Config Version", "GeneratedTime",
                    "VirtualSystem", "EventID", "Object", "FMT", "ID", "Module", "Severity", "Description",
                    "SequenceNumber", "ActionFlags", "DeviceGroupHierarchyLevel1", "DeviceGroupHierarchyLevel2", 
                    "DeviceGroupHierarchyLevel3", "DeviceGroupHierarchyLevel4", "VirtualSystemName", "DeviceName"
                ]
            }
            mutate {
                    add_tag => [ "PAN-OS_system"]
            }
        }

        date {
            match => [ "GeneratedTime", "yyyy/MM/dd HH:mm:ss", "yyyy/MM/dd HH:mm"]
            remove_field => ["GeneratedTime"]
        }

        # Original message has been fully parsed, so remove it.
        mutate {            
            remove_field => [ "message" ]
        }

        # Geolocate logs that have SourceIP if that SourceIP is a non-RFC1918 address
        if [SourceIP] and [SourceIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
               source => "SourceIP"
               target => "SourceIPGeo"
          }
            # Delete 0,0 in SourceIPGeo.location if equal to 0,0
            if ([SourceIPGeo.location] and [SourceIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "SourceIPGeo.location", "" ]
                }
            }
        }
        # Geolocate logs that have DestinationIP and if that DestinationIP is a non-RFC1918 address
        if [DestinationIP] and [DestinationIP] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "DestinationIP"
                target => "DestinationIPGeo"
            }
      
            # Delete 0,0 in DestinationIPGeo.location if equal to 0,0
            if ([DestinationIPGeo.location] and [DestinationIPGeo.location] =~ "0,0") {
                mutate {
                    replace => [ "DestinationIPGeo.location", "" ]
                }
            }
        }
        # Takes the 5-tuple of source address, source port, destination address, destination port, and protocol and does a SHA1 hash to fingerprint the flow.  This is a useful
        # way to be able to do top N terms queries on flows, not just on one field.
        if [SourceIP] and [DestinationIP] {
            fingerprint {
                concatenate_sources => true
                method => "SHA1"
                key => "logstash"
                source => [ "SourceIP", "SourcePort", "DestinationIP", "DestinationPort", "Protocol" ]
            }
        }
        metrics {
            meter => "events"
            add_tag => "metric"
        }
    }   # End of if PAN-OS_syslog in tags
}

output {
    if "PAN-OS_traffic" in [tags] {
        elasticsearch {
            hosts    => [ '127.0.0.1' ]
            index => "traffic-%{+YYYY.MM}"
        }
        #stdout { codec => rubydebug }
    }
    else if "PAN-OS_threat" in [tags] {
        elasticsearch {
            hosts    => [ '127.0.0.1' ]
            index => "threat-%{+YYYY.MM}"
        }
        #stdout { codec => rubydebug }
    }
    else if "PAN-OS_system" in [tags] {
        elasticsearch {
            hosts    => [ '127.0.0.1' ]
            index => "system-%{+YYYY.MM}"
        }
        #stdout { codec => rubydebug }
    }
    else if "PAN-OS_config" in [tags] {
        elasticsearch {
            hosts    => [ '127.0.0.1' ]
            index => "config-%{+YYYY.MM}"
        }
        #stdout { codec => rubydebug }
    }
    else if "metric" in [tags] {
        elasticsearch {
            hosts    => [ '127.0.0.1' ]
            index => "metric-%{+YYYY.MM}"
        }
    }
    else {
       file {
           path => "/var/log/logstash/failed_pan-os_events-%{+YYYY.MM}.log"
        }
    }
}